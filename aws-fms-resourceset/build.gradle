buildscript {
    dependencies {
        classpath brazilGradle.tool('BrazilGradleQualityDefaults')
    }
}

plugins {
    id 'brazil-quality-defaults'
    id "java"
    id "jacoco"

    // To build a shadow jar of this resource provider
    id 'com.github.johnrengelman.shadow'
}

description "CloudFormation Resource Provider - AWS::FMS::ResourceSet"

// Include RPDK generated source by `cfn generate`
sourceSets.main.java.srcDirs += ['target/generated-sources/rpdk']

// Inlcude schema into jar
sourceSets.main.resources {
  srcDir '.'
  include 'aws-fms-resourceset.json'
}

configurations {
    cfnPackageArchive
    happyTrails // For RIPConfig ANT task
}

dependencies {
    compile brazilGradle.build()
    testCompile brazilGradle.testbuild()
    happyTrails brazilGradle.tool('HappyTrails')
}

def cfn_command = "${brazilGradle.path('[AWSCloudFormationRPDKJavaPluginTool]all.runtimefarm')}/bin/cfn"

test {
    useJUnitPlatform()

}

check.dependsOn jacocoTestCoverageVerification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                minimum = 0.5
            }
            excludes = [
                    // CFN generated
                    '*Configuration*',
                    '*BaseHandler*',
                    '*HandlerWrapper*',
                    '*ResourceModel*',
                    '*CallbackContext*'
            ]
        }
    }
}

// Generate RPDK wrapper source before compile
task rpdkGenerateSource(type: Exec) {
  workingDir "."
  executable = cfn_command
  args = ["generate"]
}

compileJava.dependsOn(rpdkGenerateSource)

// Build a shadow jar for resource provider
shadowJar {
    // cfn-cli requires the artifact under target and suffixed with SNAPSHOT.jar
    classifier = null
    destinationDir = file("./target")
}

// Use `cfn` to build a RPDK package include resource provider shadow jar, schema etc.
task cfnPackage(type: Exec) {
  dependsOn shadowJar
  workingDir "."
  executable = cfn_command
  args = ["submit", "--dry-run"]
}

ant.taskdef(name: 'attachBrazilPathPropertyHelper', classname: 'amazon.happytrails.ant.tasks.AttachBrazilPathPropertyHelper', classpath: configurations.happyTrails.asPath)
ant.attachBrazilPathPropertyHelper()
ant.importBuild("${brazilGradle.path("[RIPConfigBuilder]pkg.configfarm.antfiles")}/antfiles/generateConfig.xml")
tasks.register('generateCTAccountConfig') {
    String inputDir = "${brazilGradle.path('package-src-root')}/aws-fms-resourceset/templates"
    String outputDir = "${brazilGradle.path('package-src-root')}/aws-fms-resourceset/contract-tests-artifacts"
    doLast {
        ant."build-rip-config"("template-dir": "${inputDir}", "output-dir": "${outputDir}", "verbose": "true")
        logger.lifecycle('Generated RIP Config.')
    }
}

task rpdkPackage(type: Zip) {
  dependsOn cfnPackage
  from zipTree("aws-fms-resourceset.zip")
  // Inject internal files
  from ("${rootDir}/aws-fms-resourceset") {
    include "settings.internal.json"
  }
  from ("${rootDir}/aws-fms-resourceset") {
      include "canary-bundle/**/*"
      include "contract-tests-artifacts/*"
  }
  destinationDir = file("./build/rpdk")
  archiveName("aws-fms-resourceset.zip")
}

rpdkPackage.dependsOn(generateCTAccountConfig)

assemble.dependsOn(rpdkPackage)

// Delete target folder for clean
clean.doLast {
  file("./target").deleteDir()
  file("aws-fms-resourceset.zip").delete()
}
